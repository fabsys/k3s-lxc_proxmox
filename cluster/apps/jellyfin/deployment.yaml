apiVersion: apps/v1
kind: Deployment
metadata:
  name: jellyfin
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jellyfin
  template:
    metadata:
      labels:
        app: jellyfin
    spec:
      securityContext:
        fsGroup: 1000
      containers:
        - name: jellyfin
          image: docker.io/jellyfin/jellyfin:10.8.13
          ports:
            - containerPort: 8096
          volumeMounts:
            - name: config
              mountPath: /config
            - name: movies
              mountPath: /media/movies
            - name: shows
              mountPath: /media/shows
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: jellyfin-pvc
        - name: movies
          hostPath:
            path: /mnt/shared_data/movies/movies
            type: Directory
        - name: shows
          hostPath:
            path: /mnt/shared_data/movies/shows
            type: Directory



---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: transmission
spec:
  replicas: 1
  selector:
    matchLabels:
      app: transmission
  template:
    metadata:
      labels:
        app: transmission
    spec:
      securityContext:
        fsGroup: 1000
        capabilities:
          add: ["NET_ADMIN"]   # NÃ©cessaire pour changer la route
      initContainers:
        - name: set-gateway
          image: busybox
          command:
            - sh
            - -c
            - |
              ip route del default
              ip route add default via 192.168.1.104
      containers:
        - name: transmission
          image: lscr.io/linuxserver/transmission:4.0.5
          ports:
            - containerPort: 9091
          volumeMounts:
            - name: config
              mountPath: /config
            - name: downloads
              mountPath: /downloads
            - name: movies
              mountPath: /media/movies
            - name: shows
              mountPath: /media/shows
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: transmission-pvc
        - name: downloads
          hostPath:
            path: /mnt/shared_data/movies/downloads
            type: Directory
        - name: movies
          hostPath:
            path: /mnt/shared_data/movies/movies
            type: Directory
        - name: shows
          hostPath:
            path: /mnt/shared_data/movies/shows
            type: Directory



---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: radarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: radarr
  template:
    metadata:
      labels:
        app: radarr
    spec:
      securityContext:
        fsGroup: 1000
      containers:
        - name: radarr
          image: lscr.io/linuxserver/radarr:5.3.6
          ports:
            - containerPort: 7878
          volumeMounts:
            - name: config
              mountPath: /config
            - name: downloads
              mountPath: /downloads/complete
            - name: movies
              mountPath: /movies
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: radarr-pvc
        - name: downloads
          hostPath:
            path: /mnt/shared_data/movies/downloads
            type: Directory
        - name: movies
          hostPath:
            path: /mnt/shared_data/movies/movies
            type: Directory




---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sonarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sonarr
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      securityContext:
        fsGroup: 1000
      containers:
        - name: sonarr
          image: lscr.io/linuxserver/sonarr:4.0.2
          ports:
            - containerPort: 8989
          volumeMounts:
            - name: config
              mountPath: /config
            - name: downloads
              mountPath: /downloads/complete
            - name: shows
              mountPath: /shows
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: sonarr-pvc
        - name: downloads
          hostPath:
            path: /mnt/shared_data/movies/downloads
            type: Directory
        - name: shows
          hostPath:
            path: /mnt/shared_data/movies/shows
            type: Directory



---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prowlarr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prowlarr
  template:
    metadata:
      labels:
        app: prowlarr
    spec:
      securityContext:
        fsGroup: 1000
      containers:
        - name: prowlarr
          image: lscr.io/linuxserver/prowlarr:1.13.3
          ports:
            - containerPort: 9696
          volumeMounts:
            - name: config
              mountPath: /config
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: prowlarr-pvc

            
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jellyseerr
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jellyseerr
  template:
    metadata:
      labels:
        app: jellyseerr
    spec:
      securityContext:
        fsGroup: 1000
      containers:
        - name: jellyseerr
          image: docker.io/fallenbagel/jellyseerr:1.7.0
          ports:
            - containerPort: 5055
          volumeMounts:
            - name: config
              mountPath: /app/config
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: jellyseerr-pvc


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: joal
  labels:
    app: joal
spec:
  replicas: 1
  selector:
    matchLabels:
      app: joal
  template:
    metadata:
      labels:
        app: joal
    spec:
      initContainers:
        - name: init-joal-data
          image: busybox
          command: ["/bin/sh", "-c"]
          args:
            - |
              mkdir -p /data/torrents /data/clients && \
              echo "Created /data/torrents and /data/clients"
          volumeMounts:
            - name: joal-config
              mountPath: /data
      containers:
        - name: joal
          image: anthonyraymond/joal:2.1.36
          args:
            - "--joal-conf=/data"
            - "--spring.main.web-environment=true"
            - "--server.port=$(PORT)"
            - "--joal.ui.path.prefix=$(SECRET_OBFUSCATION_PATH)"
            - "--joal.ui.secret-token=$(SECRET_TOKEN)"
          ports:
            - containerPort: 8080
          env:
            - name: PORT
              value: "8080"
            - name: SECRET_OBFUSCATION_PATH
              value: "joal"
            - name: SECRET_TOKEN
              value: "token"
              # valueFrom:
              #   secretKeyRef:
              #     name: joal-secret
              #     key: secret-token
          volumeMounts:
            - name: joal-config
              mountPath: /data
            - name: joal-config-json
              mountPath: /data/config.json
              subPath: config.json
      volumes:
        - name: joal-config
          persistentVolumeClaim:
            claimName: joal-config-pvc
        - name: joal-config-json
          configMap:
            name: joal-config
